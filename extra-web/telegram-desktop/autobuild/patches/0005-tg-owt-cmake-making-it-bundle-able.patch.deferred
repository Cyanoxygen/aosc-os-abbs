From 942728c76c2ff2d7f339faf06ca3976d0fba08c4 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Thu, 27 Aug 2020 00:39:31 -0600
Subject: [PATCH] cmake: making it bundle-able

---
 .gitignore              |  1 +
 CMakeLists.txt          | 13 +++----
 cmake/init_target.cmake | 83 -----------------------------------------
 cmake/libabsl.cmake     |  4 +-
 cmake/libopenh264.cmake | 22 +++++------
 cmake/libvpx.cmake      | 13 ++++---
 6 files changed, 25 insertions(+), 111 deletions(-)

diff --git a/.gitignore b/.gitignore
index 28e36e1..22ac9f0 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+build/
 out/
 .DS_Store
 src/third_party/openh264/src/res
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
index cbd13ff..b63b304 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,10 +28,11 @@ set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT t
 get_filename_component(webrtc_loc "src" REALPATH)
 set(third_party_loc ${webrtc_loc}/third_party)
 
+add_compile_definitions(HAVE_NETINET_IN_H)
 include(cmake/arch.cmake)
-include(cmake/nice_target_sources.cmake)
+# include(cmake/nice_target_sources.cmake)
 include(cmake/init_target.cmake)
-include(cmake/target_yasm_sources.cmake)
+# include(cmake/target_yasm_sources.cmake)
 include(cmake/external.cmake)
 include(cmake/libabsl.cmake)
 include(cmake/libopenh264.cmake)
@@ -56,6 +57,7 @@ target_link_libraries(tg_owt
 PUBLIC
     tg_owt::libabsl
     tg_owt::libopenh264
+    tg_owt::libopenh264_yasm
     tg_owt::libpffft
     tg_owt::librnnoise
     tg_owt::libsrtp
@@ -67,16 +69,11 @@ PUBLIC
     tg_owt::libvpx_sse4
     tg_owt::libvpx_avx
     tg_owt::libvpx_avx2
+    tg_owt::libvpx_yasm
     tg_owt::libwebrtcbuild
     tg_owt::libyuv
 )
 
-target_sources(tg_owt
-PUBLIC
-    ${libvpx_yasm_objects}
-    ${libopenh264_yasm_objects}
-)
-
 if (NOT WIN32 AND NOT APPLE)
     target_link_libraries(tg_owt PUBLIC tg_owt::libevent)
 endif()
diff --git a/cmake/init_target.cmake b/cmake/init_target.cmake
index 3cbaf9c..71f38f4 100644
--- a/cmake/init_target.cmake
+++ b/cmake/init_target.cmake
@@ -4,89 +4,6 @@
 # For license and copyright information please follow this link:
 # https://github.com/desktop-app/legal/blob/master/LEGAL
 
-function(init_target target_name) # init_target(my_target folder_name)
-    if (WIN32)
-        target_compile_features(${target_name} PUBLIC cxx_std_17)
-    elseif (APPLE)
-        target_compile_features(${target_name} PUBLIC cxx_std_14)
-    else()
-        target_compile_features(${target_name} PUBLIC cxx_std_20)
-    endif()
-    if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
-        set_target_properties(${target_name} PROPERTIES
-            MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
-    endif()
-    set_target_properties(${target_name} PROPERTIES
-        XCODE_ATTRIBUTE_CLANG_ENABLE_OBJC_WEAK YES
-        XCODE_ATTRIBUTE_GCC_INLINES_ARE_PRIVATE_EXTERN YES
-        XCODE_ATTRIBUTE_GCC_SYMBOLS_PRIVATE_EXTERN YES
-    )
-    if (TG_OWT_PACKAGED_BUILD)
-    else()
-        set_target_properties(${target_name} PROPERTIES
-            XCODE_ATTRIBUTE_GCC_OPTIMIZATION_LEVEL $<IF:$<CONFIG:Debug>,0,fast>
-            XCODE_ATTRIBUTE_LLVM_LTO $<IF:$<CONFIG:Debug>,NO,YES>
-        )
-    endif()
-    if (WIN32)
-        target_compile_definitions(${target_name}
-        PRIVATE
-            WIN32_LEAN_AND_MEAN
-            HAVE_WINSOCK2_H
-            NOMINMAX
-            HAVE_SSE2
-            HAVE_SCTP
-            ABSL_ALLOCATOR_NOTHROW=1
-        )
-
-        target_compile_options(${target_name}
-        PRIVATE
-            /W1
-            /wd4715 # not all control paths return a value.
-            /wd4244 # 'initializing' conversion from .. to .., possible loss of data.
-            /wd4838 # conversion from .. to .. requires a narrowing conversion.
-            /wd4305 # 'return': truncation from 'int' to 'bool'.
-            /MP     # Enable multi process build.
-            /EHsc   # Catch C++ exceptions only, extern C functions never throw a C++ exception.
-            /Zc:wchar_t- # don't tread wchar_t as builtin type
-            /Zi
-        )
-    else()
-        if (APPLE)
-            target_compile_options(${target_name}
-            PRIVATE
-                -Wno-deprecated-declarations
-                -fobjc-arc
-                -fvisibility=hidden
-                -fvisibility-inlines-hidden
-            )
-        else()
-            target_compile_options(${target_name}
-            PRIVATE
-                -Wno-deprecated-declarations
-                -Wno-attributes
-                -Wno-narrowing
-                -Wno-return-type
-            )
-            if (CMAKE_SIZEOF_VOID_P EQUAL 4)
-                target_compile_options(${target_name}
-                PRIVATE
-                    -g0
-                )
-            endif()
-        endif()
-
-        target_compile_options(${target_name}
-        PRIVATE
-            -msse2
-        )
-        target_compile_definitions(${target_name}
-        PRIVATE
-            HAVE_NETINET_IN_H
-        )
-    endif()
-endfunction()
-
 function(init_feature_target target_name feature)
     init_target(${target_name})
 
diff --git a/cmake/libabsl.cmake b/cmake/libabsl.cmake
index efb0634..2a4eecb 100644
--- a/cmake/libabsl.cmake
+++ b/cmake/libabsl.cmake
@@ -12,7 +12,7 @@ PRIVATE
     # absl/base/internal/exponential_biased.cc
     # absl/base/internal/low_level_alloc.cc
     # absl/base/internal/periodic_sampler.cc
-    # absl/base/internal/raw_logging.cc
+    absl/base/internal/raw_logging.cc
     # absl/base/internal/scoped_set_env.cc
     # absl/base/internal/spinlock.cc
     # absl/base/internal/spinlock_wait.cc
@@ -52,7 +52,7 @@ PRIVATE
     # absl/flags/usage_config.cc
     # absl/hash/internal/city.cc
     # absl/hash/internal/hash.cc
-    # absl/numeric/int128.cc
+    absl/numeric/int128.cc
     # absl/random/discrete_distribution.cc
     # absl/random/gaussian_distribution.cc
     # absl/random/internal/chi_square.cc
diff --git a/cmake/libopenh264.cmake b/cmake/libopenh264.cmake
index 63458c2..6e3286f 100644
--- a/cmake/libopenh264.cmake
+++ b/cmake/libopenh264.cmake
@@ -1,3 +1,4 @@
+enable_language(ASM_NASM)
 add_library(libopenh264 OBJECT)
 init_target(libopenh264)
 add_library(tg_owt::libopenh264 ALIAS libopenh264)
@@ -200,14 +201,14 @@ set(include_directories
 target_include_directories(libopenh264 PRIVATE ${include_directories})
 
 if (is_x86)
-    set(yasm_defines X86_32)
+    set(yasm_defines -DX86_32)
 else()
     if (WIN32)
-        set(yasm_defines WIN64)
+        set(yasm_defines -DWIN64)
     elseif (APPLE)
-        set(yasm_defines PREFIX UNIX64 WELS_PRIVATE_EXTERN=:private_extern)
+        set(yasm_defines -DPREFIX -DUNIX64 -DWELS_PRIVATE_EXTERN=:private_extern)
     else()
-        set(yasm_defines UNIX64 WELS_PRIVATE_EXTERN=:hidden)
+        set(yasm_defines -DUNIX64 -DWELS_PRIVATE_EXTERN=:hidden)
     endif()
 endif()
 
@@ -241,12 +242,9 @@ if (is_x86 OR is_x64)
         )
     endif()
     
-    target_yasm_sources(libopenh264 ${libopenh264_loc}
-    INCLUDE_DIRECTORIES
-        ${include_directories}
-    DEFINES
-        ${yasm_defines}
-    SOURCES
-        ${yasm_sources}
-    )
+    add_library(libopenh264_yasm OBJECT)
+    add_library(tg_owt::libopenh264_yasm ALIAS libopenh264_yasm)
+    nice_target_sources(libopenh264_yasm ${libopenh264_loc} PRIVATE ${yasm_sources})
+    set_target_properties(libopenh264_yasm PROPERTIES COMPILE_OPTIONS "${yasm_defines}")
+    target_include_directories(libopenh264_yasm PRIVATE ${include_directories})
 endif()
diff --git a/cmake/libvpx.cmake b/cmake/libvpx.cmake
index 198cd3d..bdb6ae2 100644
--- a/cmake/libvpx.cmake
+++ b/cmake/libvpx.cmake
@@ -1,3 +1,5 @@
+enable_language(ASM_NASM)
+set(CMAKE_ASM_NASM_COMPILER yasm)
 add_library(libvpx OBJECT)
 init_target(libvpx)
 add_library(tg_owt::libvpx ALIAS libvpx)
@@ -562,14 +564,13 @@ if (is_x64)
     )
 endif()
 
-target_yasm_sources(libvpx ${libvpx_loc}
-INCLUDE_DIRECTORIES
-    ${include_directories}
-DEFINES
-    CHROMIUM
-SOURCES
+add_library(libvpx_yasm OBJECT)
+add_library(tg_owt::libvpx_yasm ALIAS libvpx_yasm)
+nice_target_sources(libvpx_yasm ${libvpx_loc} PRIVATE
     ${yasm_sources}
 )
+set_target_properties(libvpx_yasm PROPERTIES COMPILE_OPTIONS "-DCHROMIUM")
+target_include_directories(libvpx_yasm PRIVATE ${include_directories})
 
 target_include_directories(libvpx
 PUBLIC
-- 
2.28.0

