--- a/CMakeLists.txt	2020-08-05 12:46:29.352282943 -0600
+++ b/CMakeLists.txt	2020-08-05 12:56:49.917221591 -0600
@@ -159,7 +159,6 @@
     # Capitalization matters here. We need the naming to match the generated paths from Conan
     set(REQUIRED_LIBS
     #    Cmake Pkg Prefix  Version     Conan Pkg
-        "Boost             1.73        boost/1.73.0"
         "Catch2            2.13        catch2/2.13.0"
         "fmt               7.0         fmt/7.0.1"
     # can't use until https://github.com/bincrafters/community/issues/1173
@@ -531,6 +530,7 @@
 enable_testing()
 add_subdirectory(externals)
 add_subdirectory(src)
+add_library(Boost::boost ALIAS boost)
 
 # Set yuzu project or yuzu-cmd project as default StartUp Project in Visual Studio depending on whether QT is enabled or not
 if(ENABLE_QT)
--- a/externals/CMakeLists.txt	2020-08-05 13:01:45.253233548 -0600
+++ b/externals/CMakeLists.txt	2020-08-05 12:58:48.671814519 -0600
@@ -4,6 +4,21 @@
 list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/externals/find-modules")
 include(DownloadExternals)
 
+# Boost
+set(BOOST_ROOT "${CMAKE_SOURCE_DIR}/externals/boost")
+set(Boost_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/externals/boost")
+set(Boost_NO_SYSTEM_PATHS ON)
+add_library(boost INTERFACE)
+target_include_directories(boost SYSTEM INTERFACE ${Boost_INCLUDE_DIR})
+
+# Boost::context
+enable_language(C ASM)
+file(GLOB boost_context_SRC
+"${CMAKE_SOURCE_DIR}/externals/boost/libs/context/src/asm/*_x86_64_*_elf_gas.S")
+message(STATUS "${boost_context_SRC}")
+add_library(boost_context STATIC ${boost_context_SRC})
+target_link_libraries(boost_context PUBLIC boost)
+
 # xbyak
 if (ARCHITECTURE_x86 OR ARCHITECTURE_x86_64)
     add_library(xbyak INTERFACE)
--- a/src/common/CMakeLists.txt	2020-08-05 12:59:40.952642255 -0600
+++ b/src/common/CMakeLists.txt	2020-08-05 13:00:09.571548048 -0600
@@ -190,7 +190,6 @@
 endif()
 
 create_target_directory_groups(common)
-find_package(Boost 1.71 COMPONENTS context headers REQUIRED)
 
-target_link_libraries(common PUBLIC ${Boost_LIBRARIES} fmt::fmt microprofile)
+target_link_libraries(common PUBLIC boost boost_context fmt::fmt microprofile)
 target_link_libraries(common PRIVATE lz4::lz4 zstd::zstd xbyak)
